package CoreJava.MultiThreading;

/*
     Thread Priorities:
     ==================
     Every Thread in java has some priority it may be default priority generated by JVM or customized priority
     provided by programmer. The valid range of Thread priorities is 1 to 10.
     Where 1 is MIN_PRIORITY and 10 is MAX_PRIORITY
     Thread class defines the following constants to represent some standard priorities.
     Thread.MIN_PRIORITY = > 1
     Thread.NORM_PRIORITY => 5
     Thread.MAX_PRIORITY => 10

     Thread Scheduler will use priorities while allocating processors.
     The Thread which has high priority will get chance 1st.
     If we 2 Threads have same priority then we can't expect exact execution order, and it depends on Thread Scheduler.
     Thread class defines the following 2 methods to get and set priorities of a Thread.

     public final int getPriority()
     public final void setPriority(int p)

     Default Priority:
     =================
     The default priority only for main Thread is 5 but for all remaining Threads default priority will be inherited
     from parent to child Thread. Whatever priority Parent Thread has the same priority will be there for child Thread.

 */
public class PriorityExample
{
    public static void main(String[] args)
    {
        System.out.println("Main Thread Priority - "+Thread.currentThread().getPriority());
        Thread.currentThread().setPriority(7);
        System.out.println("Main Thread Priority after changing Priority - "+Thread.currentThread().getPriority());
        PriorityThread priorityThread = new PriorityThread();
        priorityThread.setPriority(10);
        priorityThread.setPriority(14); // Exception in thread "main" java.lang.IllegalArgumentException
        // Thread Priority value should range from 0 to 10 or else we get Run Time Exception saying
        // Exception in thread "main" java.lang.IllegalArgumentException
        System.out.println("Child Thread Priority - "+priorityThread.getPriority());
    }
}
class PriorityThread extends Thread
{
    public void run()
    {
        for(int i =0;i<10;i++)
        {
            System.out.println("In Child Thread !!");
        }
    }
}